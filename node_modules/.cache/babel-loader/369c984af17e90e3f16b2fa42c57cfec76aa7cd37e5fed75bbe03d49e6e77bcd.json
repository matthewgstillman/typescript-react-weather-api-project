{"ast":null,"code":"var _jsxFileName = \"/Users/mattstillman/Desktop/react-projects/typescript-react-weather-api-project/typescript-react-weather-api-project/src/Components/FiveDayForecast.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport '../Styles/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FiveDayForecast = () => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const apiKey = process.env.REACT_APP_API_KEY;\n  const url = `https://api.openweathermap.org/data/2.5/forecast/daily?lat=40.776764&lon=-111.877655&cnt=7&appid=${apiKey}`;\n  const apiRequest = async () => {\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      setWeatherData(data);\n      console.log(data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  useEffect(() => {\n    apiRequest();\n  }, []);\n  const convertUnixTimeStamp = unix => {\n    let date = new Date(unix * 1000);\n    let hours = date.getHours();\n    let minutes = \"0\" + date.getMinutes();\n    let seconds = \"0\" + date.getSeconds();\n    let formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n    console.log(formattedTime);\n    return formattedTime;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Five Day Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n_s(FiveDayForecast, \"BCUo9muHyxrqajg6diFxqqqjG/A=\");\n_c = FiveDayForecast;\nexport default FiveDayForecast;\nvar _c;\n$RefreshReg$(_c, \"FiveDayForecast\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","FiveDayForecast","_s","weatherData","setWeatherData","apiKey","process","env","REACT_APP_API_KEY","url","apiRequest","response","fetch","data","json","console","log","error","convertUnixTimeStamp","unix","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedTime","substr","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mattstillman/Desktop/react-projects/typescript-react-weather-api-project/typescript-react-weather-api-project/src/Components/FiveDayForecast.tsx"],"sourcesContent":["import { useState, useEffect, FC } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport '../Styles/App.css';\n\ninterface WeatherResponse {\n    coord: {\n      lon: number;\n      lat: number;\n    };\n    weather: {\n      id: number;\n      main: string;\n      description: string;\n      icon: string;\n    }[];\n    base: string;\n    main: {\n      temp: number;\n      feels_like: number;\n      temp_min: number;\n      temp_max: number;\n      pressure: number;\n      humidity: number;\n    };\n    visibility: number;\n    wind: {\n      speed: number;\n      deg: number;\n    };\n    clouds: {\n      all: number;\n    };\n    dt: number;\n    sys: {\n      type: number;\n      id: number;\n      country: string;\n      sunrise: number;\n      sunset: number;\n    };\n    timezone: number;\n    id: number;\n    name: string;\n    cod: number;\n}\n\nconst FiveDayForecast: React.FC = () => {\n    const [weatherData, setWeatherData] = useState<WeatherResponse | null>(null);\n    const apiKey = process.env.REACT_APP_API_KEY;\n    const url = `https://api.openweathermap.org/data/2.5/forecast/daily?lat=40.776764&lon=-111.877655&cnt=7&appid=${apiKey}`;\n\n    const apiRequest = async () => {\n      try {\n        const response = await fetch(url);\n        const data: WeatherResponse = await response.json();\n        setWeatherData(data);\n        console.log(data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    useEffect(() => {\n      apiRequest();\n    }, []);\n\n    const convertUnixTimeStamp = (unix: number) => {\n      let date = new Date (unix * 1000);\n      let hours = date.getHours();\n      let minutes = \"0\" + date.getMinutes();\n      let seconds = \"0\" + date.getSeconds();\n      let formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n      console.log(formattedTime);\n      return formattedTime\n  }\n\n    return (\n        <div>\n          <h1>Five Day Forecast</h1>\n        </div>\n    )\n}\n\nexport default FiveDayForecast"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAY,OAAO;AAG/C,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AA4C3B,MAAMC,eAAyB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAyB,IAAI,CAAC;EAC5E,MAAMQ,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;EAC5C,MAAMC,GAAG,GAAG,oGAAoGJ,MAAM,EAAE;EAExH,MAAMK,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,CAAC;MACjC,MAAMI,IAAqB,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACnDV,cAAc,CAACS,IAAI,CAAC;MACpBE,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;IACnB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAEDnB,SAAS,CAAC,MAAM;IACdY,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,oBAAoB,GAAIC,IAAY,IAAK;IAC7C,IAAIC,IAAI,GAAG,IAAIC,IAAI,CAAEF,IAAI,GAAG,IAAI,CAAC;IACjC,IAAIG,KAAK,GAAGF,IAAI,CAACG,QAAQ,CAAC,CAAC;IAC3B,IAAIC,OAAO,GAAG,GAAG,GAAGJ,IAAI,CAACK,UAAU,CAAC,CAAC;IACrC,IAAIC,OAAO,GAAG,GAAG,GAAGN,IAAI,CAACO,UAAU,CAAC,CAAC;IACrC,IAAIC,aAAa,GAAGN,KAAK,GAAG,GAAG,GAAGE,OAAO,CAACK,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGH,OAAO,CAACG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC/Ed,OAAO,CAACC,GAAG,CAACY,aAAa,CAAC;IAC1B,OAAOA,aAAa;EACxB,CAAC;EAEC,oBACI5B,OAAA;IAAA8B,QAAA,eACE9B,OAAA;MAAA8B,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvB,CAAC;AAEd,CAAC;AAAAhC,EAAA,CAnCKD,eAAyB;AAAAkC,EAAA,GAAzBlC,eAAyB;AAqC/B,eAAeA,eAAe;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}