{"ast":null,"code":"var _jsxFileName = \"/Users/mattstillman/Desktop/react-projects/typescript-react-weather-api-project/typescript-react-weather-api-project/src/Components/CurrentWeather.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport '../Styles/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CurrentWeather = () => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const apiKey = process.env.REACT_APP_API_KEY;\n  const url = `https://api.openweathermap.org/data/2.5/weather?lat=40.776764&lon=-111.877655&appid=${apiKey}&units=imperial`;\n  const apiRequest = async () => {\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      setWeatherData(data);\n      console.log(data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  useEffect(() => {\n    apiRequest();\n  }, []);\n  const convertUnixTimeStamp = unix => {\n    let date = new Date(unix * 1000);\n    let hours = date.getHours();\n    let minutes = \"0\" + date.getMinutes();\n    let seconds = \"0\" + date.getSeconds();\n    let formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n    console.log(formattedTime);\n    return formattedTime;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"currentWeatherContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"weatherCardHeader\",\n      children: \"TypeScript OpenWeather API Project\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }, this), weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"cityTitle\",\n        children: weatherData.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"currentWeatherCardContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"currentWeatherCard\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weatherCardBody\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cardText\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Temperature: \", weatherData.main.temp, \"\\xB0F\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Weather: \", weatherData.weather[0].description]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Feels like: \", weatherData.main.feels_like, \"\\xB0F\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"High: \", weatherData.main.temp_max, \"\\xB0F\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Low: \", weatherData.main.temp_min, \"\\xB0F\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Humidity: \", weatherData.main.humidity, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Wind: \", weatherData.wind.speed, \" MPH\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Sunrise: \", convertUnixTimeStamp(weatherData.sys.sunrise), \" AM\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Sunset: \", convertUnixTimeStamp(weatherData.sys.sunset), \" PM\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n_s(CurrentWeather, \"BCUo9muHyxrqajg6diFxqqqjG/A=\");\n_c = CurrentWeather;\nexport default CurrentWeather;\nvar _c;\n$RefreshReg$(_c, \"CurrentWeather\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","CurrentWeather","_s","weatherData","setWeatherData","apiKey","process","env","REACT_APP_API_KEY","url","apiRequest","response","fetch","data","json","console","log","error","convertUnixTimeStamp","unix","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedTime","substr","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","main","temp","weather","description","feels_like","temp_max","temp_min","humidity","wind","speed","sys","sunrise","sunset","_c","$RefreshReg$"],"sources":["/Users/mattstillman/Desktop/react-projects/typescript-react-weather-api-project/typescript-react-weather-api-project/src/Components/CurrentWeather.tsx"],"sourcesContent":["import { useState, useEffect, FC } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport '../Styles/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\ninterface WeatherResponse {\n    coord: {\n      lon: number;\n      lat: number;\n    };\n    weather: {\n      id: number;\n      main: string;\n      description: string;\n      icon: string;\n    }[];\n    base: string;\n    main: {\n      temp: number;\n      feels_like: number;\n      temp_min: number;\n      temp_max: number;\n      pressure: number;\n      humidity: number;\n    };\n    visibility: number;\n    wind: {\n      speed: number;\n      deg: number;\n    };\n    clouds: {\n      all: number;\n    };\n    dt: number;\n    sys: {\n      type: number;\n      id: number;\n      country: string;\n      sunrise: number;\n      sunset: number;\n    };\n    timezone: number;\n    id: number;\n    name: string;\n    cod: number;\n}\n\nconst CurrentWeather: React.FC = () => {\n    const [weatherData, setWeatherData] = useState<WeatherResponse | null>(null);\n    const apiKey = process.env.REACT_APP_API_KEY;\n    const url = `https://api.openweathermap.org/data/2.5/weather?lat=40.776764&lon=-111.877655&appid=${apiKey}&units=imperial`;\n    \n    const apiRequest = async () => {\n        try {\n          const response = await fetch(url);\n          const data: WeatherResponse = await response.json();\n          setWeatherData(data);\n          console.log(data);\n        } catch (error) {\n          console.error('Error fetching data:', error);\n        }\n      };\n    \n      useEffect(() => {\n        apiRequest();\n      }, []);\n\n      const convertUnixTimeStamp = (unix: number) => {\n          let date = new Date (unix * 1000);\n          let hours = date.getHours();\n          let minutes = \"0\" + date.getMinutes();\n          let seconds = \"0\" + date.getSeconds();\n          let formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n          console.log(formattedTime);\n          return formattedTime\n      }\n    \n      return (\n        <div className=\"currentWeatherContainer\">\n          <h1 className=\"weatherCardHeader\">TypeScript OpenWeather API Project</h1>\n          {weatherData && (\n            <div>\n              <h2 className=\"cityTitle\">{weatherData.name}</h2>\n              <div className=\"currentWeatherCardContainer\">\n              <div className=\"currentWeatherCard\">\n                <div className=\"weatherCardBody\">\n                  <div className=\"cardText\">\n                    <div>Temperature: {weatherData.main.temp}째F</div>\n                    <div>Weather: {weatherData.weather[0].description}</div>\n                    <div>Feels like: {weatherData.main.feels_like}째F</div>\n                    <div>High: {weatherData.main.temp_max}째F</div>\n                    <div>Low: {weatherData.main.temp_min}째F</div>\n                    <div>Humidity: {weatherData.main.humidity}%</div>\n                    <div>Wind: {weatherData.wind.speed} MPH</div>\n                    <div>Sunrise: {convertUnixTimeStamp(weatherData.sys.sunrise)} AM</div>\n                    <div>Sunset: {convertUnixTimeStamp(weatherData.sys.sunset)} PM</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            </div>\n          )}\n        </div>\n      );      \n}\n\nexport default CurrentWeather;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}