{"ast":null,"code":"var _jsxFileName = \"/Users/mattstillman/Desktop/react-projects/typescript-react-weather-api-project/src/Components/SevenDayForecast.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport '../Styles/App.css';\nimport { getIconUrl } from '../utils/weatherIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SevenDayForecast = ({\n  lat,\n  lon\n}) => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const apiKey = process.env.REACT_APP_API_KEY;\n  const url = `https://api.openweathermap.org/data/2.5/forecast/daily?lat=${lat}&lon=${lon}&cnt=7&appid=${apiKey}&units=imperial`;\n  const apiRequest = async () => {\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      setWeatherData(data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  useEffect(() => {\n    apiRequest();\n  }, [lat, lon]);\n  const convertUnixTimeStamp = unix => {\n    let date = new Date(unix * 1000);\n    let hours = date.getHours();\n    let minutes = \"0\" + date.getMinutes();\n    let seconds = \"0\" + date.getSeconds();\n    let formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n    return formattedTime;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sevenDayMainContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"mainTitle\",\n      children: \"Seven Day Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"cityTitle\",\n        children: weatherData.city.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecastCardContainer\",\n        children: weatherData.list.map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecastCard\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weatherCardBody\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cardTitle\",\n              children: new Date(day.dt * 1000).toLocaleDateString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cardText\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"weatherIconImage\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: getIconUrl(day.weather[0].id, true),\n                  alt: `${day.weather[0].description} icon`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"High: \", day.temp.max, \" \\xB0F\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Low: \", day.temp.min, \" \\xB0F\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Weather: \", day.weather[0].description]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Humidity: \", day.humidity, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Wind Speed: \", day.speed, \" mph\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Sunrise: \", convertUnixTimeStamp(day.sunrise), \" AM\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Sunset: \", convertUnixTimeStamp(day.sunset), \" PM\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(SevenDayForecast, \"BCUo9muHyxrqajg6diFxqqqjG/A=\");\n_c = SevenDayForecast;\nexport default SevenDayForecast;\nvar _c;\n$RefreshReg$(_c, \"SevenDayForecast\");","map":{"version":3,"names":["useState","useEffect","getIconUrl","jsxDEV","_jsxDEV","SevenDayForecast","lat","lon","_s","weatherData","setWeatherData","apiKey","process","env","REACT_APP_API_KEY","url","apiRequest","response","fetch","data","json","error","console","convertUnixTimeStamp","unix","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedTime","substr","className","children","fileName","_jsxFileName","lineNumber","columnNumber","city","name","list","map","day","index","dt","toLocaleDateString","src","weather","id","alt","description","temp","max","min","humidity","speed","sunrise","sunset","_c","$RefreshReg$"],"sources":["/Users/mattstillman/Desktop/react-projects/typescript-react-weather-api-project/src/Components/SevenDayForecast.tsx"],"sourcesContent":["import { useState, useEffect, FC } from 'react';\nimport '../Styles/App.css';\nimport { getIconUrl } from '../utils/weatherIcon';\n\ninterface WeatherForecastProps {\n  lat: number;\n  lon: number;\n}\n\ninterface WeatherForecast {\n  city: {\n    coord: {\n      lat: number;\n      lon: number;\n    };\n    country: string;\n    id: number;\n    name: string;\n    population: number;\n    timezone: number;\n  };\n  cod: string;\n  message: number;\n  cnt: number;\n  list: {\n    clouds: { all: number };\n    deg: number;\n    dt: number;\n    feels_like: {\n      day: number;\n      eve: number;\n      morn: number;\n      night: number;\n    };\n    gust: number;\n    humidity: number;\n    pop: number;\n    pressure: number;\n    speed: number;\n    sunrise: number;\n    sunset: number;\n    temp: {\n      day: number;\n      eve: number;\n      max: number;\n      min: number;\n      morn: number;\n      night: number;\n    };\n    weather: {\n      description: string;\n      icon: string;\n      id: number;\n      main: string;\n    }[];\n  }[];\n}\n\nconst SevenDayForecast: FC<WeatherForecastProps> = ({ lat, lon }) => {\n  const [weatherData, setWeatherData] = useState<WeatherForecast | null>(null);\n  const apiKey = process.env.REACT_APP_API_KEY;\n  const url = `https://api.openweathermap.org/data/2.5/forecast/daily?lat=${lat}&lon=${lon}&cnt=7&appid=${apiKey}&units=imperial`;\n\n  const apiRequest = async () => {\n    try {\n      const response = await fetch(url);\n      const data: WeatherForecast = await response.json();\n      setWeatherData(data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  useEffect(() => {\n     apiRequest();\n  }, [lat, lon]);\n\n  const convertUnixTimeStamp = (unix: number) => {\n    let date = new Date(unix * 1000);\n    let hours = date.getHours();\n    let minutes = \"0\" + date.getMinutes();\n    let seconds = \"0\" + date.getSeconds();\n    let formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n    return formattedTime;\n  }\n\n  return (\n    <div className=\"sevenDayMainContainer\">\n      <h1 className=\"mainTitle\">Seven Day Forecast</h1>\n      {weatherData && (\n        <div>\n          <h2 className=\"cityTitle\">{weatherData.city.name}</h2>\n          <div className=\"forecastCardContainer\">\n            {weatherData.list.map((day, index) => (\n              <div className=\"forecastCard\" key={index}>\n                <div className=\"weatherCardBody\">\n                  <div className=\"cardTitle\">{new Date(day.dt * 1000).toLocaleDateString()}</div>\n                  <div className=\"cardText\">\n                    <div className=\"weatherIconImage\">\n                      <img src={getIconUrl(day.weather[0].id, true)} alt={`${day.weather[0].description} icon`} />\n                    </div>\n                    <div>High: {day.temp.max} °F</div>\n                    <div>Low: {day.temp.min} °F</div>\n                    <div>Weather: {day.weather[0].description}</div>\n                    <div>Humidity: {day.humidity}%</div>\n                    <div>Wind Speed: {day.speed} mph</div>\n                    <div>Sunrise: {convertUnixTimeStamp(day.sunrise)} AM</div>\n                    <div>Sunset: {convertUnixTimeStamp(day.sunset)} PM</div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );  \n}\n\nexport default SevenDayForecast;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}