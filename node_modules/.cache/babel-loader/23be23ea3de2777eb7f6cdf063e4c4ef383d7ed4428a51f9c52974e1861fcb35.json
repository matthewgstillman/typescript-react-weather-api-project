{"ast":null,"code":"var _jsxFileName = \"/Users/mattstillman/Desktop/react-projects/typescript-react-weather-api-project/typescript-react-weather-api-project/src/Components/FiveDayForecast.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport '../Styles/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SevenDayForecast = () => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const apiKey = process.env.REACT_APP_API_KEY;\n  const url = `https://api.openweathermap.org/data/2.5/forecast/daily?lat=40.776764&lon=-111.877655&cnt=7&appid=${apiKey}&units=imperial`;\n  const apiRequest = async () => {\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      setWeatherData(data);\n      console.log(data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  useEffect(() => {\n    apiRequest();\n  }, []);\n  const convertUnixTimeStamp = unix => {\n    let date = new Date(unix * 1000);\n    let hours = date.getHours();\n    let minutes = \"0\" + date.getMinutes();\n    let seconds = \"0\" + date.getSeconds();\n    let formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n    console.log(formattedTime);\n    return formattedTime;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sevenDayForecastCard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Seven Day Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          width: '18rem'\n        },\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n            children: [\"Location: \", weatherData.city.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: [\"Country: \", weatherData.city.country]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this), weatherData.list.map((day, index) => /*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          width: '18rem',\n          margin: '1rem'\n        },\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n            children: new Date(day.dt * 1000).toLocaleDateString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Temp Day: \", day.temp.day, \" \\xB0F\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Temp Night: \", day.temp.night, \" \\xB0F\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Weather: \", day.weather[0].description]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Humidity: \", day.humidity, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Wind Speed: \", day.speed, \" mph\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Sunrise: \", convertUnixTimeStamp(day.sunrise)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Sunset: \", convertUnixTimeStamp(day.sunset)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 15\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 7\n  }, this);\n};\n_s(SevenDayForecast, \"BCUo9muHyxrqajg6diFxqqqjG/A=\");\n_c = SevenDayForecast;\nexport default SevenDayForecast;\nvar _c;\n$RefreshReg$(_c, \"SevenDayForecast\");","map":{"version":3,"names":["useState","useEffect","Card","jsxDEV","_jsxDEV","SevenDayForecast","_s","weatherData","setWeatherData","apiKey","process","env","REACT_APP_API_KEY","url","apiRequest","response","fetch","data","json","console","log","error","convertUnixTimeStamp","unix","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedTime","substr","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","width","Body","Title","city","name","Text","country","list","map","day","index","margin","dt","toLocaleDateString","temp","night","weather","description","humidity","speed","sunrise","sunset","_c","$RefreshReg$"],"sources":["/Users/mattstillman/Desktop/react-projects/typescript-react-weather-api-project/typescript-react-weather-api-project/src/Components/FiveDayForecast.tsx"],"sourcesContent":["import { useState, useEffect, FC } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport '../Styles/App.css';\n\ninterface WeatherForecast {\n  city: {\n      coord: {\n          lat: number;\n          lon: number;\n      };\n      country: string;\n      id: number;\n      name: string;\n      population: number;\n      timezone: number;\n  };\n  cod: string;\n  message: number;\n  cnt: number;\n  list: {\n      clouds: { all: number };\n      deg: number;\n      dt: number;\n      feels_like: {\n          day: number;\n          eve: number;\n          morn: number;\n          night: number;\n      };\n      gust: number;\n      humidity: number;\n      pop: number;\n      pressure: number;\n      speed: number;\n      sunrise: number;\n      sunset: number;\n      temp: {\n          day: number;\n          eve: number;\n          max: number;\n          min: number;\n          morn: number;\n          night: number;\n      };\n      weather: {\n          description: string;\n          icon: string;\n          id: number;\n          main: string;\n      }[];\n  }[];\n}\n\nconst SevenDayForecast: React.FC = () => {\n  const [weatherData, setWeatherData] = useState<WeatherForecast | null>(null);\n  const apiKey = process.env.REACT_APP_API_KEY;\n  const url = `https://api.openweathermap.org/data/2.5/forecast/daily?lat=40.776764&lon=-111.877655&cnt=7&appid=${apiKey}&units=imperial`;\n\n  const apiRequest = async () => {\n    try {\n      const response = await fetch(url);\n      const data: WeatherForecast = await response.json();\n      setWeatherData(data);\n      console.log(data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  useEffect(() => {\n    apiRequest();\n  }, []);\n\n  const convertUnixTimeStamp = (unix: number) => {\n    let date = new Date(unix * 1000);\n    let hours = date.getHours();\n    let minutes = \"0\" + date.getMinutes();\n    let seconds = \"0\" + date.getSeconds();\n    let formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n    console.log(formattedTime);\n    return formattedTime;\n  }\n\n  return (\n      <div className=\"sevenDayForecastCard\">\n        <h1>Seven Day Forecast</h1>\n        {weatherData && (\n          <div>\n            <Card style={{ width: '18rem' }}>\n              <Card.Body>\n                <Card.Title>Location: {weatherData.city.name}</Card.Title>\n                <Card.Text>Country: {weatherData.city.country}</Card.Text>\n              </Card.Body>\n            </Card>\n            {weatherData.list.map((day, index) => (\n              <Card key={index} style={{ width: '18rem', margin: '1rem' }}>\n                <Card.Body>\n                  <Card.Title>{new Date(day.dt * 1000).toLocaleDateString()}</Card.Title>\n                  <Card.Text>\n                    <div>Temp Day: {day.temp.day} °F</div>\n                    <div>Temp Night: {day.temp.night} °F</div>\n                    <div>Weather: {day.weather[0].description}</div>\n                    <div>Humidity: {day.humidity}%</div>\n                    <div>Wind Speed: {day.speed} mph</div>\n                    <div>Sunrise: {convertUnixTimeStamp(day.sunrise)}</div>\n                    <div>Sunset: {convertUnixTimeStamp(day.sunset)}</div>\n                  </Card.Text>\n                </Card.Body>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n  );\n}\n\nexport default SevenDayForecast;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}